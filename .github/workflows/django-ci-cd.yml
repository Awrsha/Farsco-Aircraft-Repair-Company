name: Django CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      # Add database services if needed
      # For example, if you switch to PostgreSQL later:
      # postgres:
      #   image: postgres:13
      #   env:
      #     POSTGRES_USER: postgres
      #     POSTGRES_PASSWORD: postgres
      #     POSTGRES_DB: test_db
      #   ports:
      #     - 5432:5432
      #   options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install flake8 pytest coverage
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run Tests
      run: |
        python manage.py test
        
    - name: Run Coverage
      run: |
        coverage run --source='.' manage.py test
        coverage report
        
  security_scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run Bandit security scan
      run: |
        bandit -r . -x ./venv,./tests
        
    - name: Check dependencies for vulnerabilities
      run: |
        safety check -r requirements.txt
        
  deploy_dev:
    runs-on: ubuntu-latest
    needs: [test, security_scan]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Collect static files
      run: |
        python manage.py collectstatic --noinput
        
    # Add deployment step for development server
    # This could be using SSH to deploy to your server or using a service like Heroku
    - name: Deploy to development server
      run: |
        echo "Deploying to development server"
        # Add your deployment commands here
        # Example for Heroku:
        # pip install heroku
        # heroku container:login
        # heroku container:push web --app your-dev-app-name
        # heroku container:release web --app your-dev-app-name
        
  deploy_prod:
    runs-on: ubuntu-latest
    needs: [test, security_scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Collect static files
      run: |
        python manage.py collectstatic --noinput
        
    # Add deployment step for production server
    - name: Deploy to production server
      run: |
        echo "Deploying to production server"
        # Add your production deployment commands here
        # This could use tools like Ansible, Fabric, or direct SSH commands